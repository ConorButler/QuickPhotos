import { dedupExchange } from "urql";
import { cacheExchange } from "@urql/exchange-graphcache";
import { multipartFetchExchange } from "@urql/exchange-multipart-fetch";
import {
  GraphCacheConfig,
  CurrentUserDocument,
} from "./graphql/generated/graphql";

export const urqlClient = (ssrExchange: any) => ({
  url: "http://localhost:4000/graphql",
  fetchOptions: {
    credentials: "include",
  } as const,
  exchanges: [
    dedupExchange, // prevents duplication of queries
    cacheExchange<GraphCacheConfig>({
      updates: {
        Mutation: {
          login: (result, _args, cache, _info) => {
            // Document = a GraphQL request generated by graphql-codegen
            cache.updateQuery({ query: CurrentUserDocument }, (data) => {
              console.log("DATAAA: ", data);
              if (result.login.errors) {
                console.log("errors??");
                // if bad login, just return the currently cached currentUser
                return data;
              } else {
                console.log("setting user");
                console.log("with this: ", result.login.user);
                // set the currentUser to the logged in user
                return {
                  __typename: "User",
                  currentUser: {
                    ...result.login.user,
                  },
                };
              }
            });
          },
          register: (result, _args, cache, _info) => {
            cache.updateQuery({ query: CurrentUserDocument }, (data) => {
              if (result.register.errors) {
                return data;
              } else {
                return {
                  __typename: "User",
                  currentUser: {
                    ...result.register.user,
                  },
                };
              }
            });
          },
          logout: (result, _args, cache, _info) => {
            // when log out request sent, clear the currentUser
            cache.updateQuery({ query: CurrentUserDocument }, (data) => {
              if (result.logout) {
                return { __typename: "User", currentUser: null };
              }
              return data;
            });
          },
        },
      },
    }),
    ssrExchange,
    multipartFetchExchange,
  ],
});
